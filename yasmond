#!/usr/bin/env python

#########################################################################
# YASMon - Yet Another System Monitor                                   #
# Copyright (C) 2010  Scott Lawrence                                    #
#                                                                       #
# This program is free software: you can redistribute it and/or modify  #
# it under the terms of the GNU General Public License as published by  #
# the Free Software Foundation, either version 3 of the License, or     #
# (at your option) any later version.                                   #
#                                                                       #
# This program is distributed in the hope that it will be useful,       #
# but WITHOUT ANY WARRANTY; without even the implied warranty of        #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         #
# GNU General Public License for more details.                          #
#                                                                       #
# You should have received a copy of the GNU General Public License     #
# along with this program.  If not, see <http://www.gnu.org/licenses/>. #
#########################################################################

from optparse import OptionParser

import cPickle,re,socket,sys,thread

import sysmon,sysmon.local,sysmon.callback

#parse the options
parser=OptionParser(usage="usage: %prog",
                    version=("YASMon "+(sysmon.version())+"\n"+
                             "Copyright (C) 2010 Scott Lawrence.\n"+
                             "Licensed under the GNU GPL version 3 or later "+
                             "<http://gnu.org/licenses/gpl.html>.\n"
                             "This is free software: "+
                             "you are free to change and redistribute it.\n"+
                             "There is NO WARRANTY, to the "+
                             "extent permitted by law.\n\n"+
                             "Written by Scott Lawrence <bytbox@gmail.com>"))
parser.add_option("-p","--port",dest="port",default='61874',
                  help="The port on which to host the YASMon server. Default: 61874")
# (maintainer note - the port default comes from the sha1sum of YASMon
# with no newline)
(options,args)=parser.parse_args()

#initialize the monitor
callback=sysmon.callback.SysmonCallback()
system=sysmon.local.get_local()
system.set_delay(-1)
system.set_callback(callback)
#we don't call run() - there's nothing to run! just wait

#open the sockets
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.bind(('',int(options.port)))
s.listen(2)

mutex=thread.allocate_lock()

def handle_conn(conn,addr):
    global outfile,mutex
    #tell the admin
    print "Handling connection from %s" % addr
    #make a file for easy stuff
    f=conn.makefile()
    #for each request
    for x in f:
        #make one line
        x=re.sub("[\n\r]","",x)
        print "Telling %s about %s" % (addr,x)
        with mutex:
            outfile=f
            if x=='overview':
                #list all parts
                #(skip uptime)
                #cpus
                for cpu in system.processors():
                    f.write("processor %s\n" % cpu.name())

                #(skip memory)
                #filesystems
                for fs in system.filesystems():
                    pass

                #drives

                #(skip processlist)
                #(skip uptime)
                #done; make sure everything got sent
            elif x=='filesystem':
                #filesystems
                for fs in system.filesystems():
                    fs.update()
            elif x=='all':
                #everything
                system.update()
            elif x=='uptime':
                #uptime
                system.uptime().update()
                #that doesn't have a callback - just give the answer
                f.write("%d\n" % system.uptime().uptime())
            elif x=='memory':
                #memory
                system.memory().update()
                #get the pickled dictionary
                f.write("%s\n" % cPickle.dumps(system.memory().dict()))
            else:
                #processor?
                match=re.match("^processor (.*)$",x)
                if match:
                    for cpu in system.processors():
                        if cpu.name()==match.group(1):
                            cpu.update()
                            f.write("%s\n" % cPickle.dumps(cpu.dict()))
            f.write("*DONE\n")
            f.flush()
    conn.close()
    print "%s left" % addr

try:
    while True:
        conn, addr = s.accept()
        # break off a thread to handle the connection
        thread.start_new_thread(handle_conn,(conn,addr[0]))
except:
    print "Exception occured!"

#stop the daemon
system.acquire()
s.close()

